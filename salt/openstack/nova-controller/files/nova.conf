{% set mysql = salt['mine.get']('roles:mysql', 'network.ip_addrs', 'grain').itervalues().next() -%}
{% set nova_controller = salt['mine.get']('roles:nova-controller', 'network.ip_addrs', 'grain').itervalues().next() -%}
{% set my_ip = salt['network.ip_addrs']('eth0') -%}
{% set public_interface = salt['pillar.get']('nova:network:public_interface') -%}

{% if 'nova-compute' in grains['roles'] -%}
{% set routing_source_ip = salt['network.ip_addrs'](public_interface) -%}
{% endif -%}

[DEFAULT]
# LOGS
logdir = {{ salt['pillar.get']('nova:service:logdir') }}
verbose = {{ salt['pillar.get']('nova:service:verbose') }}

# MISC
base_dir_name = {{ salt['pillar.get']('nova:service:base_dir_name') }}
instance_name_template = {{ salt['pillar.get']('nova:service:instance_name_template') }}
instances_path = {{ salt['pillar.get']('nova:service:instances_path') }}
lock_path = {{ salt['pillar.get']('nova:service:lock_path') }}
state_path = {{ salt['pillar.get']('nova:service:state_path') }}
rootwrap_config = {{ salt['pillar.get']('nova:service:rootwrap_config') }}

# SCHEDULER
scheduler_driver = {{ salt['pillar.get']('nova:service:scheduler_driver') }}

# DATABASE
sql_connection = mysql://nova:{{ salt['pillar.get']('nova:db:password') }}@{{ mysql[0] }}:3306/nova

# APIS
allow_admin_api = {{ salt['pillar.get']('nova:service:allow_admin_api') }}
api_paste_config = {{ salt['pillar.get']('nova:service:api_paste_config') }}
enabled_apis = {{ salt['pillar.get']('nova:service:enabled_apis') }}
metadata_host = {{ my_ip[0] }}
metadata_listen = {{ salt['pillar.get']('nova:service:metadata_listen') }}
osapi_compute_workers = {{ salt['pillar.get']('nova:service:osapi_compute_workers') }}

# RABBITMQ
rabbit_host = {{ nova_controller[0] }}
rabbit_password = {{ salt['pillar.get']('rabbitmq:password') }}
rabbit_port = {{ salt['pillar.get']('rabbitmq:port') }}
rabbit_userid = {{ salt['pillar.get']('rabbitmq:user') }}

# GLANCE
glance_api_servers = {{ nova_controller[0] }}:9292
image_service = {{ salt['pillar.get']('nova:service:image_service') }}
cache_images = {{ salt['pillar.get']('nova:service:cache_images') }}
force_raw_images = {{ salt['pillar.get']('nova:service:force_raw_images') }}

# CINDER
volume_api_class = {{ salt['pillar.get']('nova:service:volume_api_class') }}

# NETWORK
allow_same_net_traffic = {{ salt['pillar.get']('nova:network:allow_same_net_traffic') }}
auto_assign_floating_ip = {{ salt['pillar.get']('nova:network:auto_assign_floating_ip') }}
dhcpbridge = {{ salt['pillar.get']('nova:network:dhcpbridge') }}
dhcpbridge_flagfile = {{ salt['pillar.get']('nova:network:dhcpbridge_flagfile') }}
dmz_cidr = {{ salt['pillar.get']('nova:network:dmz_cidr') }}
dns_server = {{ salt['pillar.get']('nova:network:dns_server') }}
ec2_private_dns_show_ip = {{ salt['pillar.get']('nova:network:ec2_private_dns_show_ip') }}
fixed_range = ''
flat_injected = {{ salt['pillar.get']('nova:network:flat_injected') }}
flat_interface = {{ salt['pillar.get']('nova:network:flat_interface') }}
flat_network_bridge = {{ salt['pillar.get']('nova:network:flat_network_bridge') }}
force_dhcp_release = {{ salt['pillar.get']('nova:network:force_dhcp_release') }}
multi_host = {{ salt['pillar.get']('nova:network:multi_host') }}
my_ip = {{ my_ip[0] }}
network_manager = {{ salt['pillar.get']('nova:network:network_manager') }}
public_interface = {{ public_interface }}
{% if 'nova-compute' in grains['roles'] and routing_source_ip -%}
routing_source_ip = {{ routing_source_ip[0] }}
{% endif -%}
send_arp_for_ha = {{ salt['pillar.get']('nova:network:send_arp_for_ha') }}

# NOVNC CONSOLE
novnc_enable = {{ salt['pillar.get']('nova:service:novnc_enable') }}
novncproxy_base_url = http://{{ nova_controller[0] }}:6080/vnc_auto.html
vncserver_listen = {{ my_ip[0] }}
vncserver_proxyclient_address = {{ my_ip[0] }}

# AUTHENTICATION
auth_strategy = {{ salt['pillar.get']('nova:service:auth_strategy') }}
use_deprecated_auth = {{ salt['pillar.get']('nova:service:use_deprecated_auth') }}
